hashmap：
HashMap由数组+链表组成的。hashmap有一个entey内部类，所以。hashmap每一个节点就是一个entry对象，存储了一对key，value键值对。
key==hashcode()==hash()==indexfor()也就是去摸运算==下表值。
头插法和尾插法：头插法是因为jdk认为新插入的数据是热点数据，需要经常使用的，但是头插法在扩容的时候会有rehash的一个过程，调用resize方法，会造成环行链表取不出数据，
然后rehash过后节点会重新排序，顺序也会被打乱起不到预想的效果。
尾插法避免的环行链表的产生。
hashmap currenthashmap hashtable
推荐使用currenthashmap来保证线程安全
currenthashmap的value用volution修饰，只在put的时候使用Synchronize的同步代码块加锁，get的时候不加锁。
锁升级：无锁、偏向锁、轻量级锁、重量级锁
先是无锁状态，尝试获取偏向锁，
偏向锁就是当某个线程优先拿到锁之后，会记录线程的ID，下次这个线程再次进入会直接比对这个id，不需要再次获取锁，减少开销。
如果线程拿不到偏向锁就是升级成轻量锁，cas锁，回去不到就会自旋，自选一定次数之后，不成功就升级为重量级锁。

锁升级：开始的时候，synchronized是通过对象内部的一个叫做监视器锁(monitor)来实现的，这个是调用底层的一些操作来实现，开销非常大，所以在jdk1.6之后进行了一个锁升级。
，先是无锁的状态，当某个线程优先获取到锁之后，会升级为偏向锁，偏向锁就是某个线程优先拿到锁之后，会把线程id记录到锁对象的mark word里面并形成指针
下次这个线程进来直接测试是否有指针指向，不需要再次获取锁。这是针对单个线程，当多个线程来访问时，这个锁会升级为轻量级锁，也就是cas
通过自旋来获取，自旋一定次数后，不成功会升级为重量级锁。

Lock和Synchronize区别：
1.首先Synchronize是java内置的关键字属于jvm层面的，而lock是属于java的api方法。
2.
Synchronize在jdk1.6之后是偏向锁（锁升级）
lock是可重入锁（具体是lock所里面有一个sync的内部类继承AQS的这样一个所框架来实现加锁解锁
当线程竞争不到时会到一个同步队列中，通过自旋去竞争锁，然后这个时候会涉及到公平锁和不公平锁（同步队列）。

volatile：保证变量的可见性，防止指令的重排序（双重检查锁用到的单例模式）
保证了变量的可见性：使用了MESI协议和总嗅探机制。
防止指令重排序：基于内存屏障实现的。

线程池：
newSingleThreadExecutor：单例线程池，只会创建唯一的线程来执行任务，可以保证线程按照指定顺序来执行任务
newFixedThreadPool：定长线程池，可控制线程池的最大并发量，当任务超出线程的数量，则在队列中等待
newCachedThreadPool：缓存线程池，当任务超出线程量，可以回收空闲线程，如无可回收，则新建线程，线程池为无限大
newScheduledThreadPool：周期任务线程池，支持定时及周期性的任务执行，可以延迟执行。
线程池得7个参数
线程池核心线程的大小
线程池线程数量的最大值
空闲线程的存活时间
空闲线程存活时间的时间单位
工作队列（4种）
线程工程
拒绝策略（4种）抛弃任务，什么都不做；抛弃任务并抛出RejectedExecutionException异常（默认）；抛弃队列最早的那个任务，把该任务放入队列；由调用线程（提交任务的线程）直接执行被丢弃的任务的。

线程池在创建的时候没有线程，当有任务进来之后，线程池才会创建线程，
当任务数量小于核心线程的大小时有任务进来，此时就算有空闲线程还是会新创建线程，
当线程数量达到核心线程数量的时候，新任务进来会放在任务队列当中，
当线程数量大于核心线程数量的时候，会优先使用空闲线程，而不再是新建线程，
当线程数量达到最大线程数量的时并且任务队列已满时，有新任务进来会调用拒接策略，
当空闲线程的空闲时间超出线程池设置的最大空闲时间的时候，会销毁

进程和线程：进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。
进程是有自己的独立空间，一个进程包含了多个线程，每个线程来执行不同的任务。多个线程直接共享同一个进程的堆和方法区。

反射创建对象或是反射调用方法的时候都会降低性能，因为反射是动态获取的过程，需要加载一些原有类的信息。通过emit包来做优化。
序列化：

类加载机制：
主要有三种机制：全盘托付，双亲委派，缓存机制
类加载器主要有：根类加载器(jvm本身的类库)，扩展类加载器（扩展包里面的类 javax.），系统类加载器，用户类加载器

java的类加载过程：三个步骤   加载、连接、初始化。
加载主要是由类加载器来执行，就是根据一个类得全限定类名来读取此类的二进制字节流到jvm内部，然后创建一个class的实例对象
连接阶段主要是起到一个程序的验证，为静态资源分配空间这样的作用（验证，准备，解析）
初始化过程：主要是做好准备工作，例如一些static静态资源和类变量加载，它是由jvm调用<clinit>方法来执行一些初始化语句。初始化的过程也是先初始化父类，从上往下依次执行。

jvm性能调优：可以设置一些参数，newsize  新生代和老年代的比例。

Lazy 初始化：按需加载，就是在要使用的再去创建。

集合：
list集合是有序，可以存储重复元素，可以存储null
set集合是无序，不能存储重复元素，可以存储一个null值。
ArrayList 默认初始容量为10，通过arrar.copy来复制。
线程不安全，查询速度快

　　　　底层数据结构是数组结构

　　　　扩容增量：原容量的 0.5倍

　　　　如 ArrayList的容量为10，一次扩容后是容量为15

同样可以通过分析源码知道：
Vector：线程安全，但速度慢

　　　　底层数据结构是数组结构

　　　　加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容

　　　　扩容增量：原容量的 1倍

　　　　如 Vector的容量为10，一次扩容后是容量为20

Set(集) 元素无序的、不可重复。

HashSet：线程不安全，存取速度快

　　　　　底层实现是一个HashMap（保存数据），实现Set接口

　　　　　默认初始容量为16（为何是16，见下方对HashMap的描述）

　　　　　加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容

　　　　　扩容增量：原容量的 1 倍

　　　　　　如 HashSet的容量为16，一次扩容后是容量为32

oom：内存用完了
造成原因就是：内存泄漏还有内存溢出（一般是堆内存溢出，方法区内存溢出（class信息太多了），虚拟机栈溢出（方法出现了死循环，深度递归））
